name: Manage Issues for Try and Solve Commits

on:
  push:
    branches:
      - main # Adjust this to your default branch if needed

permissions:
  issues: write # Required for creating and closing issues
  contents: read # Required for actions/checkout

jobs:
  manage-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2 # Fetch the last two commits to get the latest commit message

      - name: Check commit message for 'try' or 'solve' and extract URL
        id: check_commit
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=%B)
          URL=$(echo "$COMMIT_MESSAGE" | grep -oE 'https?://[^ ]+' | head -n 1)
          COMMIT_SHA=$(git rev-parse HEAD)
          # URL-encode the outputs to handle special characters
          ENCODED_URL=$(printf '%s' "$URL" | jq -sRr @uri)
          ENCODED_COMMIT_MESSAGE=$(printf '%s' "$COMMIT_MESSAGE" | jq -sRr @uri)
          if [ -n "$URL" ]; then
            echo "problem_url=$ENCODED_URL" >> $GITHUB_OUTPUT
          else
            echo "problem_url=none" >> $GITHUB_OUTPUT
          fi
          echo "commit_message=$ENCODED_COMMIT_MESSAGE" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          if [[ "$COMMIT_MESSAGE" =~ [Tt][Rr][Yy] ]]; then
            echo "action=try" >> $GITHUB_OUTPUT
          elif [[ "$COMMIT_MESSAGE" =~ [Ss][Oo][Ll][Vv][Ee] ]]; then
            echo "action=solve" >> $GITHUB_OUTPUT
          else
            echo "action=none" >> $GITHUB_OUTPUT
          fi

      - name: Debug outputs
        run: |
          echo "Action: ${{ steps.check_commit.outputs.action }}"
          echo "Problem URL: ${{ steps.check_commit.outputs.problem_url }}"
          echo "Commit Message: ${{ steps.check_commit.outputs.commit_message }}"
          echo "Commit SHA: ${{ steps.check_commit.outputs.commit_sha }}"

      - name: Create GitHub Issue for 'try'
        if: steps.check_commit.outputs.action == 'try' && steps.check_commit.outputs.problem_url != 'none'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const encodedCommitMessage = '${{ steps.check_commit.outputs.commit_message }}';
            const commitSha = '${{ steps.check_commit.outputs.commit_sha }}';
            const encodedUrl = '${{ steps.check_commit.outputs.problem_url }}';
            const problemUrl = decodeURIComponent(encodedUrl);
            const commitMessage = decodeURIComponent(encodedCommitMessage);
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Link to Problem: Commit ${commitSha.substring(0, 7)} contains 'try'`,
              body: `A commit with the message "${commitMessage}" contains unsolved problem. Please review.\n\n[Link to Problem](${problemUrl})\n\nCommit SHA: ${commitSha}`,
              labels: ['auto-generated', 'review']
            });

      - name: Close GitHub Issue for 'solve'
        if: steps.check_commit.outputs.action == 'solve' && steps.check_commit.outputs.problem_url != 'none'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const encodedUrl = '${{ steps.check_commit.outputs.problem_url }}';
            const problemUrl = decodeURIComponent(encodedUrl);
            console.log(`Searching for issues with URL: ${problemUrl}`);
            // Fetch all open issues and filter manually
            const issues = await github.paginate(github.rest.issues.listForRepo, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'auto-generated',
              per_page: 100
            });
            const matchingIssue = issues.find(issue => issue.body.includes(problemUrl));
            if (matchingIssue) {
              console.log(`Found matching issue #${matchingIssue.number}`);
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: matchingIssue.number,
                state: 'closed',
                body: matchingIssue.body + '\n\nClosed due to "solve" commit with matching problem URL: ' + problemUrl
              });
              console.log(`Closed issue #${matchingIssue.number}`);
            } else {
              console.log('No matching issue found for URL: ' + problemUrl);
            }
